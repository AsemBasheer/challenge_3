const express = require('express');
let app = express();

app.use(express.urlencoded({ extended: true }));
app.use(express.static(__dirname + '/./public'));
app.use(express.json());

app.get('/app', function (req, res) {
    res.sendFile(__dirname + '/./compiled/client/app.js');
});

app.post('/form1', function (req, res) {
    console.log("form1 >>", req.body);
    let form1 = new checkOut1({
        name: req.body.name,
        email: req.body.email,
        password: req.body.password
    });
    form1.save();
    res.end();
});
app.post('/form2', function (req, res) {
    console.log("form2 >>", req.body);
    let form2 = new checkOut2({
        email: req.body.email,
        addressLine1: req.body.addressLine1,
        addressLine2: req.body.addressLine2,
        addressCity: req.body.addressCity,
        addressState: req.body.addressState,
        addressZip: req.body.addressZip,
        phone: req.body.phone
    });
    form2.save();
    res.end();
});
app.post('/form3', function (req, res) {
    console.log("form3 >>", req.body);
    let form3 = new checkOut3({
        email: req.body.email,
        creditNumber: req.body.creditNumber,
        creditExpiry: req.body.creditExpiry,
        creditCVV: req.body.creditCVV,
        billingZip: req.body.billingZip
    });
    form3.save();
    res.end();
});

const mongoose = require('mongoose');
const dbURI = 'mongodb+srv://AsemB:AsemB@cluster0.auxil.mongodb.net/checkOutDB?retryWrites=true&w=majority';
mongoose.connect(dbURI, { useNewUrlParser: true, useUnifiedTopology: true }).then(result => {
    console.log('connected to MongoDB');
}).catch(err => {
    console.log(err);
});

let nameCOSchema = mongoose.Schema({
    name: String,
    email: String,
    password: String
});
let addressCOSchema = mongoose.Schema({
    email: String,
    addressLine1: String,
    addressLine2: String,
    addressCity: String,
    addressState: String,
    addressZip: Number,
    phone: Number
});
let cSchema = mongoose.Schema({
    email: String,
    creditNumber: Number,
    creditExpiry: String,
    creditCVV: Number,
    billingZip: String
});

let checkOut1 = mongoose.model('checkOut1', nameCOSchema);
let checkOut2 = mongoose.model('checkOut2', addressCOSchema);
let checkOut3 = mongoose.model('checkOut3', cSchema);

let port = 3000;

app.listen(port, function () {
    console.log(`listening on port ${port}`);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImFwcCIsInVzZSIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsInN0YXRpYyIsIl9fZGlybmFtZSIsImpzb24iLCJnZXQiLCJyZXEiLCJyZXMiLCJzZW5kRmlsZSIsInBvc3QiLCJjb25zb2xlIiwibG9nIiwiYm9keSIsImZvcm0xIiwiY2hlY2tPdXQxIiwibmFtZSIsImVtYWlsIiwicGFzc3dvcmQiLCJzYXZlIiwiZW5kIiwiZm9ybTIiLCJjaGVja091dDIiLCJhZGRyZXNzTGluZTEiLCJhZGRyZXNzTGluZTIiLCJhZGRyZXNzQ2l0eSIsImFkZHJlc3NTdGF0ZSIsImFkZHJlc3NaaXAiLCJwaG9uZSIsImZvcm0zIiwiY2hlY2tPdXQzIiwiY3JlZGl0TnVtYmVyIiwiY3JlZGl0RXhwaXJ5IiwiY3JlZGl0Q1ZWIiwiYmlsbGluZ1ppcCIsIm1vbmdvb3NlIiwiZGJVUkkiLCJjb25uZWN0IiwidXNlTmV3VXJsUGFyc2VyIiwidXNlVW5pZmllZFRvcG9sb2d5IiwidGhlbiIsInJlc3VsdCIsImNhdGNoIiwiZXJyIiwibmFtZUNPU2NoZW1hIiwiU2NoZW1hIiwiU3RyaW5nIiwiYWRkcmVzc0NPU2NoZW1hIiwiTnVtYmVyIiwiY1NjaGVtYSIsIm1vZGVsIiwicG9ydCIsImxpc3RlbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsVUFBVUMsUUFBUSxTQUFSLENBQWhCO0FBQ0EsSUFBSUMsTUFBTUYsU0FBVjs7QUFFQUUsSUFBSUMsR0FBSixDQUFRSCxRQUFRSSxVQUFSLENBQW1CLEVBQUVDLFVBQVUsSUFBWixFQUFuQixDQUFSO0FBQ0FILElBQUlDLEdBQUosQ0FBUUgsUUFBUU0sTUFBUixDQUFlQyxZQUFZLFdBQTNCLENBQVI7QUFDQUwsSUFBSUMsR0FBSixDQUFRSCxRQUFRUSxJQUFSLEVBQVI7O0FBRUFOLElBQUlPLEdBQUosQ0FBUSxNQUFSLEVBQWdCLFVBQVVDLEdBQVYsRUFBZUMs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VSxNQUFULENBQWdCO0FBQzFCNUIsV0FBTzZCLE1BRG1CO0FBRTFCZixrQkFBY2lCLE1BRlk7QUFHMUJoQixrQkFBY2MsTUFIWTtBQUkxQmIsZUFBV2UsTUFKZTtBQUsxQmQsZ0JBQVlZO0FBTGMsQ0FBaEIsQ0FBZDs7QUFRQSxJQUFJL0IsWUFBWW9CLFNBQVNlLEtBQVQsQ0FBZSxXQUFmLEVBQTRCTixZQUE1QixDQUFoQjtBQUNBLElBQUl0QixZQUFZYSxTQUFTZSxLQUFULENBQWUsV0FBZixFQUE0QkgsZUFBNUIsQ0FBaEI7QUFDQSxJQUFJakIsWUFBWUssU0FBU2UsS0FBVCxDQUFlLFdBQWYsRUFBNEJELE9BQTVCLENBQWhCOztBQUdBLElBQUlFLE9BQU8sSUFBWDs7QUFFQXBELElBQUlxRCxNQUFKLENBQVdELElBQVgsRUFBaUIsWUFBWTtBQUN6QnhDLFlBQVFDLEdBQVIsQ0FBYSxxQkFBb0J1QyxJQUFLLEVBQXRDO0FBQ0gsQ0FGRCIsImZpbGUiOiJzZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xyXG5sZXQgYXBwID0gZXhwcmVzcygpO1xyXG5cclxuYXBwLnVzZShleHByZXNzLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSlcclxuYXBwLnVzZShleHByZXNzLnN0YXRpYyhfX2Rpcm5hbWUgKyAnLy4vcHVibGljJykpXHJcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpXHJcblxyXG5hcHAuZ2V0KCcvYXBwJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XHJcbiAgICByZXMuc2VuZEZpbGUoX19kaXJuYW1lICsgJy8uL2NvbXBpbGVkL2NsaWVudC9hcHAuanMnKTtcclxufSk7XHJcblxyXG5hcHAucG9zdCgnL2Zvcm0xJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcImZvcm0xID4+XCIsIHJlcS5ib2R5KVxyXG4gICAgbGV0IGZvcm0xID0gbmV3IGNoZWNrT3V0MSh7XHJcbiAgICAgICAgbmFtZTogcmVxLmJvZHkubmFtZSxcclxuICAgICAgICBlbWFpbDogcmVxLmJvZHkuZW1haWwsXHJcbiAgICAgICAgcGFzc3dvcmQ6IHJlcS5ib2R5LnBhc3N3b3JkXHJcbiAgICB9KVxyXG4gICAgZm9ybTEuc2F2ZSgpXHJcbiAgICByZXMuZW5kKClcclxufSk7XHJcbmFwcC5wb3N0KCcvZm9ybTInLCBmdW5jdGlvbiAocmVxLCByZXMpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiZm9ybTIgPj5cIiwgcmVxLmJvZHkpXHJcbiAgICBsZXQgZm9ybTIgPSBuZXcgY2hlY2tPdXQyKHtcclxuICAgICAgICBlbWFpbDogcmVxLmJvZHkuZW1haWwsXHJcbiAgICAgICAgYWRkcmVzc0xpbmUxOiByZXEuYm9keS5hZGRyZXNzTGluZTEsXHJcbiAgICAgICAgYWRkcmVzc0xpbmUyOiByZXEuYm9keS5hZGRyZXNzTGluZTIsXHJcbiAgICAgICAgYWRkcmVzc0NpdHk6IHJlcS5ib2R5LmFkZHJlc3NDaXR5LFxyXG4gICAgICAgIGFkZHJlc3NTdGF0ZTogcmVxLmJvZHkuYWRkcmVzc1N0YXRlLFxyXG4gICAgICAgIGFkZHJlc3NaaXA6IHJlcS5ib2R5LmFkZHJlc3NaaXAsXHJcbiAgICAgICAgcGhvbmU6IHJlcS5ib2R5LnBob25lLFxyXG4gICAgfSlcclxuICAgIGZvcm0yLnNhdmUoKVxyXG4gICAgcmVzLmVuZCgpXHJcbn0pO1xyXG5hcHAucG9zdCgnL2Zvcm0zJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcImZvcm0zID4+XCIsIHJlcS5ib2R5KVxyXG4gICAgbGV0IGZvcm0zID0gbmV3IGNoZWNrT3V0Myh7XHJcbiAgICAgICAgZW1haWw6IHJlcS5ib2R5LmVtYWlsLFxyXG4gICAgICAgIGNyZWRpdE51bWJlcjogcmVxLmJvZHkuY3JlZGl0TnVtYmVyLFxyXG4gICAgICAgIGNyZWRpdEV4cGlyeTogcmVxLmJvZHkuY3JlZGl0RXhwaXJ5LFxyXG4gICAgICAgIGNyZWRpdENWVjogcmVxLmJvZHkuY3JlZGl0Q1ZWLFxyXG4gICAgICAgIGJpbGxpbmdaaXA6IHJlcS5ib2R5LmJpbGxpbmdaaXAsXHJcbiAgICB9KVxyXG4gICAgZm9ybTMuc2F2ZSgpXHJcbiAgICByZXMuZW5kKClcclxufSk7XHJcblxyXG5cclxuY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xyXG5jb25zdCBkYlVSSSA9ICdtb25nb2RiK3NydjovL0FzZW1COkFzZW1CQGNsdXN0ZXIwLmF1eGlsLm1vbmdvZGIubmV0L2NoZWNrT3V0REI/cmV0cnlXcml0ZXM9dHJ1ZSZ3PW1ham9yaXR5JztcclxubW9uZ29vc2UuY29ubmVjdChkYlVSSSwgeyB1c2VOZXdVcmxQYXJzZXI6IHRydWUsIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZSB9KVxyXG4gICAgLnRoZW4oKHJlc3VsdCkgPT4geyBjb25zb2xlLmxvZygnY29ubmVjdGVkIHRvIE1vbmdvREInKSB9KVxyXG4gICAgLmNhdGNoKChlcnIpID0+IHsgY29uc29sZS5sb2coZXJyKSB9KTtcclxuXHJcblxyXG5cclxubGV0IG5hbWVDT1NjaGVtYSA9IG1vbmdvb3NlLlNjaGVtYSh7XHJcbiAgICBuYW1lOiBTdHJpbmcsXHJcbiAgICBlbWFpbDogU3RyaW5nLFxyXG4gICAgcGFzc3dvcmQ6IFN0cmluZyxcclxufSk7XHJcbmxldCBhZGRyZXNzQ09TY2hlbWEgPSBtb25nb29zZS5TY2hlbWEoe1xyXG4gICAgZW1haWw6IFN0cmluZyxcclxuICAgIGFkZHJlc3NMaW5lMTogU3RyaW5nLFxyXG4gICAgYWRkcmVzc0xpbmUyOiBTdHJpbmcsXHJcbiAgICBhZGRyZXNzQ2l0eTogU3RyaW5nLFxyXG4gICAgYWRkcmVzc1N0YXRlOiBTdHJpbmcsXHJcbiAgICBhZGRyZXNzWmlwOiBOdW1iZXIsXHJcbiAgICBwaG9uZTogTnVtYmVyLFxyXG59KTtcclxubGV0IGNTY2hlbWEgPSBtb25nb29zZS5TY2hlbWEoe1xyXG4gICAgZW1haWw6IFN0cmluZyxcclxuICAgIGNyZWRpdE51bWJlcjogTnVtYmVyLFxyXG4gICAgY3JlZGl0RXhwaXJ5OiBTdHJpbmcsXHJcbiAgICBjcmVkaXRDVlY6IE51bWJlcixcclxuICAgIGJpbGxpbmdaaXA6IFN0cmluZyxcclxufSk7XHJcblxyXG5sZXQgY2hlY2tPdXQxID0gbW9uZ29vc2UubW9kZWwoJ2NoZWNrT3V0MScsIG5hbWVDT1NjaGVtYSk7XHJcbmxldCBjaGVja091dDIgPSBtb25nb29zZS5tb2RlbCgnY2hlY2tPdXQyJywgYWRkcmVzc0NPU2NoZW1hKTtcclxubGV0IGNoZWNrT3V0MyA9IG1vbmdvb3NlLm1vZGVsKCdjaGVja091dDMnLCBjU2NoZW1hKTtcclxuXHJcblxyXG5sZXQgcG9ydCA9IDMwMDA7XHJcblxyXG5hcHAubGlzdGVuKHBvcnQsIGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnNvbGUubG9nKGBsaXN0ZW5pbmcgb24gcG9ydCAke3BvcnR9YCk7XHJcbn0pOyJdfQ==