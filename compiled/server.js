const express = require('express');
let app = express();

app.use(express.urlencoded({ extended: true }));
app.use(express.static(__dirname + '/./public'));
app.use(express.json());

app.get('/app', function (req, res) {
    res.sendFile(__dirname + '/./compiled/client/app.js');
});

app.post('/', function (req, res) {
    console.log(req.body);
    res.end();
});

const mongoose = require('mongoose');
const dbURI = 'mongodb+srv://AsemB:AsemB@cluster0.auxil.mongodb.net/checkOutDB?retryWrites=true&w=majority';
mongoose.connect(dbURI, { useNewUrlParser: true, useUnifiedTopology: true }).then(result => {
    console.log('connected to MongoDB');
}).catch(err => {
    console.log(err);
});

let checkOutSchema = mongoose.Schema({
    name: String,
    email: String,
    password: String,
    addressLine1: String,
    addressLine2: String,
    addressCity: String,
    addressState: String,
    addressZip: Number,
    phone: Number,
    creditNumber: Number,
    creditExpiry: String,
    creditCVV: Number,
    billingZip: String
});

let chechOut = mongoose.model('Repo', checkOutSchema);

let port = 3000;

app.listen(port, function () {
    console.log(`listening on port ${port}`);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImFwcCIsInVzZSIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsInN0YXRpYyIsIl9fZGlybmFtZSIsImpzb24iLCJnZXQiLCJyZXEiLCJyZXMiLCJzZW5kRmlsZSIsInBvc3QiLCJjb25zb2xlIiwibG9nIiwiYm9keSIsImVuZCIsIm1vbmdvb3NlIiwiZGJVUkkiLCJjb25uZWN0IiwidXNlTmV3VXJsUGFyc2VyIiwidXNlVW5pZmllZFRvcG9sb2d5IiwidGhlbiIsInJlc3VsdCIsImNhdGNoIiwiZXJyIiwiY2hlY2tPdXRTY2hlbWEiLCJTY2hlbWEiLCJuYW1lIiwiU3RyaW5nIiwiZW1haWwiLCJwYXNzd29yZCIsImFkZHJlc3NMaW5lMSIsImFkZHJlc3NMaW5lMiIsImFkZHJlc3NDaXR5IiwiYWRkcmVzc1N0YXRlIiwiYWRkcmVzc1ppcCIsIk51bWJlciIsInBob25lIiwiY3JlZGl0TnVtYmVyIiwiY3JlZGl0RXhwaXJ5IiwiY3JlZGl0Q1ZWIiwiYmlsbGluZ1ppcCIsImNoZWNoT3V0IiwibW9kZWwiLCJwb3J0IiwibGlzdGVuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxVQUFVQyxRQUFRLFNBQVIsQ0FBaEI7QUFDQSxJQUFJQyxNQUFNRixTQUFWOztBQUVBRSxJQUFJQyxHQUFKLENBQVFILFFBQVFJLFVBQVIsQ0FBbUIsRUFBRUMsVUFBVSxJQUFaLEVBQW5CLENBQVI7QUFDQUgsSUFBSUMsR0FBSixDQUFRSCxRQUFRTSxNQUFSLENBQWVDLFlBQVksV0FBM0IsQ0FBUjtBQUNBTCxJQUFJQyxHQUFKLENBQVFILFFBQVFRLElBQVIsRUFBUjs7QUFFQU4sSUFBSU8sR0FBSixDQUFRLE1BQVIsRUFBZ0IsVUFBVUMsR0FBVixFQUFlQyxHQUFmLEVBQW9CO0FBQ2hDQSxRQUFJQyxRQUFKLENBQWFMLFlBQVksMkJBQXpCO0FBQ0gsQ0FGRDs7QUFJQUwsSUFBSVcsSUFBSixDQUFTLEdBQVQsRUFBYyxVQUFVSCxHQUFWLEVBQWVDLEdBQWYsRUFBb0I7QUFDOUJHLFlBQVFDLEdBQVIsQ0FBWUwsSUFBSU0sSUFBaEI7QUFDQUwsUUFBSU0sR0FBSjtBQUNILENBSEQ7O0FBTUEsTUFBTUMsV0FBV2pCLFFBQVEsVUFBUixDQUFqQjtBQUNBLE1BQU1rQixRQUFRLDZGQUFkO0FBQ0FELFNBQVNFLE9BQVQsQ0FBaUJELEtBQWpCLEVBQXdCLEVBQUVFLGlCQUFpQixJQUFuQixFQUF5QkMsb0JBQW9CLElBQTdDLEVBQXhCLEVBQ0tDLElBREwsQ0FDV0MsTUFBRCxJQUFZO0FBQUVWLFlBQVFDLEdBQVIsQ0FBWSxzQkFBWjtBQUFxQyxDQUQ3RCxFQUVLVSxLQUZMLENBRVlDLEdBQUQsSUFBUztBQUFFWixZQUFRQyxHQUFSLENBQVlXLEdBQVo7QUFBa0IsQ0FGeEM7O0FBTUEsSUFBSUMsaUJBQWlCVCxTQUFTVSxNQUFULENBQWdCO0FBQ2pDQyxVQUFNQyxNQUQyQjtBQUVqQ0MsV0FBT0QsTUFGMEI7QUFHakNFLGNBQVVGLE1BSHVCO0FBSWpDRyxrQkFBY0gsTUFKbUI7QUFLakNJLGtCQUFjSixNQUxtQjtBQU1qQ0ssaUJBQWFMLE1BTm9CO0FBT2pDTSxrQkFBY04sTUFQbUI7QUFRakNPLGdCQUFZQyxNQVJxQjtBQVNqQ0MsV0FBT0QsTUFUMEI7QUFVakNFLGtCQUFjRixNQVZtQjtBQVdqQ0csa0JBQWNYLE1BWG1CO0FBWWpDWSxlQUFXSixNQVpzQjtBQWFqQ0ssZ0JBQVliO0FBYnFCLENBQWhCLENBQXJCOztBQWdCQSxJQUFJYyxXQUFXMUIsU0FBUzJCLEtBQVQsQ0FBZSxNQUFmLEVBQXVCbEIsY0FBdkIsQ0FBZjs7QUFHQSxJQUFJbUIsT0FBTyxJQUFYOztBQUVBNUMsSUFBSTZDLE1BQUosQ0FBV0QsSUFBWCxFQUFpQixZQUFZO0FBQ3pCaEMsWUFBUUMsR0FBUixDQUFhLHFCQUFvQitCLElBQUssRUFBdEM7QUFDSCxDQUZEIiwiZmlsZSI6InNlcnZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XHJcbmxldCBhcHAgPSBleHByZXNzKCk7XHJcblxyXG5hcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKVxyXG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKF9fZGlybmFtZSArICcvLi9wdWJsaWMnKSlcclxuYXBwLnVzZShleHByZXNzLmpzb24oKSlcclxuXHJcbmFwcC5nZXQoJy9hcHAnLCBmdW5jdGlvbiAocmVxLCByZXMpIHtcclxuICAgIHJlcy5zZW5kRmlsZShfX2Rpcm5hbWUgKyAnLy4vY29tcGlsZWQvY2xpZW50L2FwcC5qcycpO1xyXG59KTtcclxuXHJcbmFwcC5wb3N0KCcvJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XHJcbiAgICBjb25zb2xlLmxvZyhyZXEuYm9keSlcclxuICAgIHJlcy5lbmQoKVxyXG59KTtcclxuXHJcblxyXG5jb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XHJcbmNvbnN0IGRiVVJJID0gJ21vbmdvZGIrc3J2Oi8vQXNlbUI6QXNlbUJAY2x1c3RlcjAuYXV4aWwubW9uZ29kYi5uZXQvY2hlY2tPdXREQj9yZXRyeVdyaXRlcz10cnVlJnc9bWFqb3JpdHknO1xyXG5tb25nb29zZS5jb25uZWN0KGRiVVJJLCB7IHVzZU5ld1VybFBhcnNlcjogdHJ1ZSwgdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlIH0pXHJcbiAgICAudGhlbigocmVzdWx0KSA9PiB7IGNvbnNvbGUubG9nKCdjb25uZWN0ZWQgdG8gTW9uZ29EQicpIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4geyBjb25zb2xlLmxvZyhlcnIpIH0pO1xyXG5cclxuXHJcblxyXG5sZXQgY2hlY2tPdXRTY2hlbWEgPSBtb25nb29zZS5TY2hlbWEoe1xyXG4gICAgbmFtZTogU3RyaW5nLFxyXG4gICAgZW1haWw6IFN0cmluZyxcclxuICAgIHBhc3N3b3JkOiBTdHJpbmcsXHJcbiAgICBhZGRyZXNzTGluZTE6IFN0cmluZyxcclxuICAgIGFkZHJlc3NMaW5lMjogU3RyaW5nLFxyXG4gICAgYWRkcmVzc0NpdHk6IFN0cmluZyxcclxuICAgIGFkZHJlc3NTdGF0ZTogU3RyaW5nLFxyXG4gICAgYWRkcmVzc1ppcDogTnVtYmVyLFxyXG4gICAgcGhvbmU6IE51bWJlcixcclxuICAgIGNyZWRpdE51bWJlcjogTnVtYmVyLFxyXG4gICAgY3JlZGl0RXhwaXJ5OiBTdHJpbmcsXHJcbiAgICBjcmVkaXRDVlY6IE51bWJlcixcclxuICAgIGJpbGxpbmdaaXA6IFN0cmluZyxcclxufSk7XHJcblxyXG5sZXQgY2hlY2hPdXQgPSBtb25nb29zZS5tb2RlbCgnUmVwbycsIGNoZWNrT3V0U2NoZW1hKTtcclxuXHJcblxyXG5sZXQgcG9ydCA9IDMwMDA7XHJcblxyXG5hcHAubGlzdGVuKHBvcnQsIGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnNvbGUubG9nKGBsaXN0ZW5pbmcgb24gcG9ydCAke3BvcnR9YCk7XHJcbn0pOyJdfQ==