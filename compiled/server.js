const express = require('express');
let app = express();

app.use(express.urlencoded({ extended: true }));
app.use(express.static(__dirname + '/./public'));
app.use(express.json());

app.get('/app', function (req, res) {
    res.sendFile(__dirname + '/./compiled/client/app.js');
});

app.post('/form1', function (req, res) {
    console.log("form1 >>", req.body);
    res.end();
});
app.post('/form2', function (req, res) {
    console.log("form2 >>", req.body);
    res.end();
});
app.post('/form3', function (req, res) {
    console.log("form3 >>", req.body);
    res.end();
});

const mongoose = require('mongoose');
const dbURI = 'mongodb+srv://AsemB:AsemB@cluster0.auxil.mongodb.net/checkOutDB?retryWrites=true&w=majority';
mongoose.connect(dbURI, { useNewUrlParser: true, useUnifiedTopology: true }).then(result => {
    console.log('connected to MongoDB');
}).catch(err => {
    console.log(err);
});

let nameCOSchema = mongoose.Schema({
    name: String,
    email: String,
    password: String
});
let addressCOSchema = mongoose.Schema({
    addressLine1: String,
    addressLine2: String,
    addressCity: String,
    addressState: String,
    addressZip: Number,
    phone: Number
});
let cSchema = mongoose.Schema({
    creditNumber: Number,
    creditExpiry: String,
    creditCVV: Number,
    billingZip: String
});

let chechOut1 = mongoose.model('chechOut1', nameCOSchema);
let chechOut2 = mongoose.model('chechOut2', addressCOSchema);
let chechOut3 = mongoose.model('chechOut3', cSchema);

let port = 3000;

app.listen(port, function () {
    console.log(`listening on port ${port}`);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImFwcCIsInVzZSIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsInN0YXRpYyIsIl9fZGlybmFtZSIsImpzb24iLCJnZXQiLCJyZXEiLCJyZXMiLCJzZW5kRmlsZSIsInBvc3QiLCJjb25zb2xlIiwibG9nIiwiYm9keSIsImVuZCIsIm1vbmdvb3NlIiwiZGJVUkkiLCJjb25uZWN0IiwidXNlTmV3VXJsUGFyc2VyIiwidXNlVW5pZmllZFRvcG9sb2d5IiwidGhlbiIsInJlc3VsdCIsImNhdGNoIiwiZXJyIiwibmFtZUNPU2NoZW1hIiwiU2NoZW1hIiwibmFtZSIsIlN0cmluZyIsImVtYWlsIiwicGFzc3dvcmQiLCJhZGRyZXNzQ09TY2hlbWEiLCJhZGRyZXNzTGluZTEiLCJhZGRyZXNzTGluZTIiLCJhZGRyZXNzQ2l0eSIsImFkZHJlc3NTdGF0ZSIsImFkZHJlc3NaaXAiLCJOdW1iZXIiLCJwaG9uZSIsImNTY2hlbWEiLCJjcmVkaXROdW1iZXIiLCJjcmVkaXRFeHBpcnkiLCJjcmVkaXRDVlYiLCJiaWxsaW5nWmlwIiwiY2hlY2hPdXQxIiwibW9kZWwiLCJjaGVjaE91dDIiLCJjaGVjaE91dDMiLCJwb3J0IiwibGlzdGVuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxVQUFVQyxRQUFRLFNBQVIsQ0FBaEI7QUFDQSxJQUFJQyxNQUFNRixTQUFWOztBQUVBRSxJQUFJQyxHQUFKLENBQVFILFFBQVFJLFVBQVIsQ0FBbUIsRUFBRUMsVUFBVSxJQUFaLEVBQW5CLENBQVI7QUFDQUgsSUFBSUMsR0FBSixDQUFRSCxRQUFRTSxNQUFSLENBQWVDLFlBQVksV0FBM0IsQ0FBUjtBQUNBTCxJQUFJQyxHQUFKLENBQVFILFFBQVFRLElBQVIsRUFBUjs7QUFFQU4sSUFBSU8sR0FBSixDQUFRLE1BQVIsRUFBZ0IsVUFBVUMsR0FBVixFQUFlQyxHQUFmLEVBQW9CO0FBQ2hDQSxRQUFJQyxRQUFKLENBQWFMLFlBQVksMkJBQXpCO0FBQ0gsQ0FGRDs7QUFJQUwsSUFBSVcsSUFBSixDQUFTLFFBQVQsRUFBbUIsVUFBVUgsR0FBVixFQUFlQyxHQUFmLEVBQW9CO0FBQ25DRyxZQUFRQyxHQUFSLENBQVksVUFBWixFQUF1QkwsSUFBSU0sSUFBM0I7QUFDQUwsUUFBSU0sR0FBSjtBQUNILENBSEQ7QUFJQWYsSUFBSVcsSUFBSixDQUFTLFFBQVQsRUFBbUIsVUFBVUgsR0FBVixFQUFlQyxHQUFmLEVBQW9CO0FBQ25DRyxZQUFRQyxHQUFSLENBQVksVUFBWixFQUF1QkwsSUFBSU0sSUFBM0I7QUFDQUwsUUFBSU0sR0FBSjtBQUNILENBSEQ7QUFJQWYsSUFBSVcsSUFBSixDQUFTLFFBQVQsRUFBbUIsVUFBVUgsR0FBVixFQUFlQyxHQUFmLEVBQW9CO0FBQ25DRyxZQUFRQyxHQUFSLENBQVksVUFBWixFQUF1QkwsSUFBSU0sSUFBM0I7QUFDQUwsUUFBSU0sR0FBSjtBQUNILENBSEQ7O0FBTUEsTUFBTUMsV0FBV2pCLFFBQVEsVUFBUixDQUFqQjtBQUNBLE1BQU1rQixRQUFRLDZGQUFkO0FBQ0FELFNBQVNFLE9BQVQsQ0FBaUJELEtBQWpCLEVBQXdCLEVBQUVFLGlCQUFpQixJQUFuQixFQUF5QkMsb0JBQW9CLElBQTdDLEVBQXhCLEVBQ0tDLElBREwsQ0FDV0MsTUFBRCxJQUFZO0FBQUVWLFlBQVFDLEdBQVIsQ0FBWSxzQkFBWjtBQUFxQyxDQUQ3RCxFQUVLVSxLQUZMLENBRVlDLEdBQUQsSUFBUztBQUFFWixZQUFRQyxHQUFSLENBQVlXLEdBQVo7QUFBa0IsQ0FGeEM7O0FBTUEsSUFBSUMsZUFBZVQsU0FBU1UsTUFBVCxDQUFnQjtBQUMvQkMsVUFBTUMsTUFEeUI7QUFFL0JDLFdBQU9ELE1BRndCO0FBRy9CRSxjQUFVRjtBQUhxQixDQUFoQixDQUFuQjtBQUtBLElBQUlHLGtCQUFrQmYsU0FBU1UsTUFBVCxDQUFnQjtBQUNsQ00sa0JBQWNKLE1BRG9CO0FBRWxDSyxrQkFBY0wsTUFGb0I7QUFHbENNLGlCQUFhTixNQUhxQjtBQUlsQ08sa0JBQWNQLE1BSm9CO0FBS2xDUSxnQkFBWUMsTUFMc0I7QUFNbENDLFdBQU9EO0FBTjJCLENBQWhCLENBQXRCO0FBUUEsSUFBSUUsVUFBVXZCLFNBQVNVLE1BQVQsQ0FBZ0I7QUFDMUJjLGtCQUFjSCxNQURZO0FBRTFCSSxrQkFBY2IsTUFGWTtBQUcxQmMsZUFBV0wsTUFIZTtBQUkxQk0sZ0JBQVlmO0FBSmMsQ0FBaEIsQ0FBZDs7QUFPQSxJQUFJZ0IsWUFBWTVCLFNBQVM2QixLQUFULENBQWUsV0FBZixFQUE0QnBCLFlBQTVCLENBQWhCO0FBQ0EsSUFBSXFCLFlBQVk5QixTQUFTNkIsS0FBVCxDQUFlLFdBQWYsRUFBNEJkLGVBQTVCLENBQWhCO0FBQ0EsSUFBSWdCLFlBQVkvQixTQUFTNkIsS0FBVCxDQUFlLFdBQWYsRUFBNEJOLE9BQTVCLENBQWhCOztBQUdBLElBQUlTLE9BQU8sSUFBWDs7QUFFQWhELElBQUlpRCxNQUFKLENBQVdELElBQVgsRUFBaUIsWUFBWTtBQUN6QnBDLFlBQVFDLEdBQVIsQ0FBYSxxQkFBb0JtQyxJQUFLLEVBQXRDO0FBQ0gsQ0FGRCIsImZpbGUiOiJzZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xyXG5sZXQgYXBwID0gZXhwcmVzcygpO1xyXG5cclxuYXBwLnVzZShleHByZXNzLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSlcclxuYXBwLnVzZShleHByZXNzLnN0YXRpYyhfX2Rpcm5hbWUgKyAnLy4vcHVibGljJykpXHJcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpXHJcblxyXG5hcHAuZ2V0KCcvYXBwJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XHJcbiAgICByZXMuc2VuZEZpbGUoX19kaXJuYW1lICsgJy8uL2NvbXBpbGVkL2NsaWVudC9hcHAuanMnKTtcclxufSk7XHJcblxyXG5hcHAucG9zdCgnL2Zvcm0xJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcImZvcm0xID4+XCIscmVxLmJvZHkpXHJcbiAgICByZXMuZW5kKClcclxufSk7XHJcbmFwcC5wb3N0KCcvZm9ybTInLCBmdW5jdGlvbiAocmVxLCByZXMpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiZm9ybTIgPj5cIixyZXEuYm9keSlcclxuICAgIHJlcy5lbmQoKVxyXG59KTtcclxuYXBwLnBvc3QoJy9mb3JtMycsIGZ1bmN0aW9uIChyZXEsIHJlcykge1xyXG4gICAgY29uc29sZS5sb2coXCJmb3JtMyA+PlwiLHJlcS5ib2R5KVxyXG4gICAgcmVzLmVuZCgpXHJcbn0pO1xyXG5cclxuXHJcbmNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcclxuY29uc3QgZGJVUkkgPSAnbW9uZ29kYitzcnY6Ly9Bc2VtQjpBc2VtQkBjbHVzdGVyMC5hdXhpbC5tb25nb2RiLm5ldC9jaGVja091dERCP3JldHJ5V3JpdGVzPXRydWUmdz1tYWpvcml0eSc7XHJcbm1vbmdvb3NlLmNvbm5lY3QoZGJVUkksIHsgdXNlTmV3VXJsUGFyc2VyOiB0cnVlLCB1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWUgfSlcclxuICAgIC50aGVuKChyZXN1bHQpID0+IHsgY29uc29sZS5sb2coJ2Nvbm5lY3RlZCB0byBNb25nb0RCJykgfSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiB7IGNvbnNvbGUubG9nKGVycikgfSk7XHJcblxyXG5cclxuXHJcbmxldCBuYW1lQ09TY2hlbWEgPSBtb25nb29zZS5TY2hlbWEoe1xyXG4gICAgbmFtZTogU3RyaW5nLFxyXG4gICAgZW1haWw6IFN0cmluZyxcclxuICAgIHBhc3N3b3JkOiBTdHJpbmcsXHJcbn0pO1xyXG5sZXQgYWRkcmVzc0NPU2NoZW1hID0gbW9uZ29vc2UuU2NoZW1hKHtcclxuICAgIGFkZHJlc3NMaW5lMTogU3RyaW5nLFxyXG4gICAgYWRkcmVzc0xpbmUyOiBTdHJpbmcsXHJcbiAgICBhZGRyZXNzQ2l0eTogU3RyaW5nLFxyXG4gICAgYWRkcmVzc1N0YXRlOiBTdHJpbmcsXHJcbiAgICBhZGRyZXNzWmlwOiBOdW1iZXIsXHJcbiAgICBwaG9uZTogTnVtYmVyLFxyXG59KTtcclxubGV0IGNTY2hlbWEgPSBtb25nb29zZS5TY2hlbWEoe1xyXG4gICAgY3JlZGl0TnVtYmVyOiBOdW1iZXIsXHJcbiAgICBjcmVkaXRFeHBpcnk6IFN0cmluZyxcclxuICAgIGNyZWRpdENWVjogTnVtYmVyLFxyXG4gICAgYmlsbGluZ1ppcDogU3RyaW5nLFxyXG59KTtcclxuXHJcbmxldCBjaGVjaE91dDEgPSBtb25nb29zZS5tb2RlbCgnY2hlY2hPdXQxJywgbmFtZUNPU2NoZW1hKTtcclxubGV0IGNoZWNoT3V0MiA9IG1vbmdvb3NlLm1vZGVsKCdjaGVjaE91dDInLCBhZGRyZXNzQ09TY2hlbWEpO1xyXG5sZXQgY2hlY2hPdXQzID0gbW9uZ29vc2UubW9kZWwoJ2NoZWNoT3V0MycsIGNTY2hlbWEpO1xyXG5cclxuXHJcbmxldCBwb3J0ID0gMzAwMDtcclxuXHJcbmFwcC5saXN0ZW4ocG9ydCwgZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc29sZS5sb2coYGxpc3RlbmluZyBvbiBwb3J0ICR7cG9ydH1gKTtcclxufSk7Il19